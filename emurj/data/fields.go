// Code generated by github.com/rj45/rj32/emurj/bitfield. DO NOT EDIT.

package data

type Bus uint64

func (b Bus) Data() int {
	return int((b >> 48) & 0xffff)
}

func (b Bus) SetData(v int) Bus {
	b &= ^Bus(0xffff << 48)
	b |= (Bus(v) & 0xffff) << 48
	return b
}

func (b Bus) Address() int {
	return int((b >> 27) & 0x1fffff)
}

func (b Bus) SetAddress(v int) Bus {
	b &= ^Bus(0x1fffff << 27)
	b |= (Bus(v) & 0x1fffff) << 27
	return b
}

func (b Bus) WE() bool {
	const bit = 1 << 26
	return b&bit == bit
}

func (b Bus) SetWE(v bool) Bus {
	const bit = 1 << 26
	if v {
		return b | bit
	}
	return b & ^Bus(bit)
}

func (b Bus) Ack() bool {
	const bit = 1 << 25
	return b&bit == bit
}

func (b Bus) SetAck(v bool) Bus {
	const bit = 1 << 25
	if v {
		return b | bit
	}
	return b & ^Bus(bit)
}
